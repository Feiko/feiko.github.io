<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Feiko.IO</title>
		<link>https://www.feiko.io/</link>
		<description>Feiko's personal site about everything IoT and Tech</description>
		<copyright>Copyright © 2022</copyright>
		<managingEditor>Feiko Gorter</managingEditor>
		<pubDate>Mon, 10 Jan 2022 11:44:09 GMT</pubDate>
		<lastBuildDate>Mon, 10 Jan 2022 11:44:09 GMT</lastBuildDate>
		<item>
			<title>Getting started with .NET nanoFramework</title>
			<link>http://www.feiko.io/posts/2022-01-03-getting-started-with-net-nanoframework</link>
			<description>Getting Started with .NET nanoFramework, C# for microcontrollers, using an ESP32 microcontroller and Visual Studio.</description>
			<guid>http://www.feiko.io/posts/2022-01-03-getting-started-with-net-nanoframework</guid>
			<pubDate>Mon, 03 Jan 2022 15:19:42 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this video I'll show you how to get started with .NET nanoFramework, C# for microcontrollers. Just get yourself a cheap ESP32 microcontroller and follow along!&lt;/p&gt;
&lt;p&gt;In this video I used the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.nanoframework.net/content/getting-started-guides/getting-started-managed.html"&gt;nanoFramework documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nanoframework"&gt;Github nanoFramework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudio.microsoft.com/vs/"&gt;Visual Studio 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.espressif.com/en/products/socs/esp32"&gt;ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers"&gt;ESP32 USB driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>NanoFramework - C# for microcontrollers with 64k ram</title>
			<link>http://www.feiko.io/posts/2021-05-17-nanoframework-c-for-microcontrollers-with-64k-ram</link>
			<description>NanoFramework brings C# .NET to microcontrollers. Giving developers the best embedded experience and making IoT easy! </description>
			<enclosure url="http://www.feiko.io/images/nanoframework.png" length="0" type="image" />
			<guid>http://www.feiko.io/posts/2021-05-17-nanoframework-c-for-microcontrollers-with-64k-ram</guid>
			<pubDate>Mon, 17 May 2021 22:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;A lot of you may probably think ‘.NET nano... what now? I’ve never heard Scott Guthrie or Scott Hanselman talking about this nanoFramework during Microsoft build conference?’. You're right, and in my humble opinion they should start talking about this amazing framework because it has a great role to fulfill in the Internet of Things domain, especially for Microsoft.   
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="micro-framework-is-dead-long-live-nanoframework"&gt;Micro Framework is dead, Long live nanoFramework!&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;You could look at .NET nanoframework as the bastard C# son in the .NET world. nanoFramework is the direct descendant of the .NET Micro Framework. Micro Framework released in 2007 is a high level C# programming language for small devices with 256kb of ram and 512kb of flash. Released in a time nobody had even heard of the term IoT, the Micro Framework, was far ahead of its time. Although 256kb of ram may not sound like much, Micro Controllers with these amounts of memory were still quite expensive back in those days. Although Micro Framework made a promising start and had a great active community, the framework slowly lost terrain to other embedded microcontroller frameworks. While the rest of the .NET framework pushed on, Micro Framework was left behind.    &lt;/p&gt;
&lt;p&gt;Since 2007, the IT world has radically changed. With Cloud and smart phones, a whole new world and IT landscape took shape. This enabled the Internet of Things revolution. In the wake of this revolution, also grew the need for making development of these ‘things’ easy. Soon new high-level programming languages emerged, like MicroPython, Espruino (Javascript), TinyGo (Golang) and others. Although the Micro Framework was left behind, it was not forgotten. In 2017 a small group headed by José Simoes, started work on the new .NET nanoFramework. Salvaging what they could from the old deprecated Micro Framework and starting anew. They squeezed C# into systems with only 64kb of ram and 256kb of flash, making it truly ‘nano’, a monumental achievement.     
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="why-nanoframework"&gt;Why nanoFramework&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Until 2007 developing embedded software for small microcontrollers was a laborious task, requiring you to write low level C or C++. Still, today writing C++ is a very viable and cost effective solution if you are planning on producing thousands of devices. Using higher programming languages on microcontrollers usually comes with a performance penalty. Meaning you have to use more capable microcontrollers, therefore, being more expensive and often less power efficient. This being said, the cost of purchasing a more powerful microcontroller has come down from many tens of dollars to sometimes a few dollars or less. These are devices that often already have WiFi, Bluetooth or other connectivity integrated in their silicon. These devices are very flexible and great for prototyping because they are so easy to program. I even use these devices in production environments. &lt;/p&gt;
&lt;p&gt;Though Micro Framework was unique in 2007, today you can choose from several alternatives. There are several reasons I think nanoFramework is the most superior platform to date:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With nanoFramework you can write C#. What more convincing do you need? If it’s good enough for Bill Gates, it should be good enough for you!&lt;/li&gt;
&lt;li&gt;nanoFramework is mostly compatible with your normal .Net, a lot of libraries just run out of the box. &lt;/li&gt;
&lt;li&gt;Full Visual Studio support with complete Intellisense. &lt;/li&gt;
&lt;li&gt;Full debugging experience. Set breakpoints, step into, over, conditional breakpoints. Just attach your device, hit F5 and off you go!&lt;/li&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Combine managed C# together with unmanaged C++&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Great active community.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Specially the full Visual Studio IDE experience together with testing and debugging sets nanoFramework apart from the rest. In other higher languages you almost always have to write debug information to the console out. This makes debugging complex applications very hard. NanoFramework’s ability to set breakpoints dynamically reduces development time by a lot and minimizes frustration. &lt;/p&gt;
&lt;p&gt;Although nanoFramework is very usable for production today, it’s still actively under development. Features and libraries are constantly being added. The nanoFramework team is really moving mountains with all the work they're doing. You can do a lot of great stuff like build a small webserver or use the AMQP library to connect to Azure IoT Hub. The greatest pain is not having generics and therefore also missing out on stuff like Tasks and async/await. Having to deal with non generic lists and some hardcore threading can sometimes feel like the .NET 1.0 stone age (it can also be fun and good practice). However, I have it from a very reliable source that generics and async/await are just around the corner!
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="final-thoughts"&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;NanoFramework is still mostly unknown to the .NET and embedded system developers. This is a shame, because if you are working with domotics or IoT, slaving away on your C++ skills or frustrated about bad debug experience, nanoFramework is just the thing for you. If you know C# and want to start with devices, why not pick up a 4 dollar ESP32 or other compatible board and get started today? You can join nanoFramework on discord and contribute on GitHub. In one of my next posts I will talk about using the Websockets library on nanoFramework. A library I have been working on for some time. Showcasing how cool and powerful C# on devices can be. &lt;/p&gt;
&lt;p&gt;Finally, I really hope Microsoft will open their hearts to their bastard sibling and let nanoFramework in. NanoFramework can really make Microsoft Azure IoT much simpler. Creating the ability to share code between your embedded device and IoT backend. Think about it: why should IoT be more difficult than building an ASP.NET site or an WPF application? It’s time for the next step in the Microsoft IoT revolution. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
 
&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.nanoframework.net/content/getting-started-guides/getting-started-managed.html"&gt;Getting Started with nanoFramework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nanoframework.net/"&gt;NanoFramework Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.com/invite/gCyBu8T"&gt;Discord support for nanoFramework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Adding Netlify CMS to your .NET powered static Website</title>
			<link>http://www.feiko.io/posts/2021-05-07-adding-netlify-cms-to-your-net-powered-static-website</link>
			<description>Create an .net powered website for free using Github Pages, Statiq.web and Netlify CMS - Part II</description>
			<enclosure url="http://www.feiko.io/images/netlify-cms-example.png" length="0" type="image" />
			<guid>http://www.feiko.io/posts/2021-05-07-adding-netlify-cms-to-your-net-powered-static-website</guid>
			<pubDate>Fri, 07 May 2021 18:53:38 GMT</pubDate>
			<content:encoded>&lt;p&gt;This is part II of the series about creating your own .NET powered static website. Here you can find part I: &lt;a href="https://www.feiko.io/posts/2021-04-30-create-your-own-net-powered-website-for-free"&gt;Create your own .net powered static website for FREE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial we are going to use NetlifyCMS. Netlify CMS is a flat-file headless CMS. Flat-file means that content is saved to simple files rather than using a database like SQL or MongoDB. In our case, these are Markdown files. A headless CMS is a Content Management System that is completely detached and unaware of any backend systems used to generate your website. This differs completely from the systems we know from the ASP.NET world. A traditional CMS like Umbraco is completely built on top of ASP.NET MVC and uses a SQL database. The content management and public website are very much intertwined and done by the same hosting platform.&lt;/p&gt;
&lt;p&gt;Flat-file and headless CMS systems are ideal for managing content of simple websites. These systems are usually very nimble and easy to set up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At the end of this tutorial you will have:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A repository running your actual clean static public GitHub Page&lt;/li&gt;
&lt;li&gt;A second private repository running your .NET site-generator/backend that you build in Part I&lt;/li&gt;
&lt;li&gt;The Netlify CMS that uses Netlify to update your markdown content on GitHub&lt;/li&gt;
&lt;li&gt;A GitHub Actions attached to your site generator that will automatically update your website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s get started and pick up where we left off in Part I. You can also look into my &lt;a href="https://github.com/Feiko/StaticBlogExample"&gt;example repo&lt;/a&gt; on my GitHub.
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-1-adding-the-netlify-cms-and-github-repos"&gt;&lt;strong&gt;Step 1 -&lt;/strong&gt; Adding the Netlify CMS and GitHub repos&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;We start by adding Netlify CMS so we can add and manage our content in a friendly manner. Open the project you created in Part I and create an &lt;em&gt;admin&lt;/em&gt; directory inside the &lt;em&gt;input&lt;/em&gt; directory. In this directory we create an &lt;em&gt;index.html&lt;/em&gt; file with the following magic Netlify CMS code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;ShouldOutput: true
---
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;Content Manager&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Include the script that builds the page and powers Netlify CMS --&amp;gt;
  &amp;lt;script src=&amp;quot;https://unpkg.com/netlify-cms&amp;#64;^2.0.0/dist/netlify-cms.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are going to push our code to a new GitHub repo on your GitHub. We can easily do this in the latest version of VS2019 using ‘Git Changes’. Make sure you give your repository a meaningful name like ‘MyWebSiteGenerator’. Please don’t tell me you don’t have a GitHub account!!! Shame on you, you call yourself a developer 😜 ???&lt;/p&gt;
&lt;?# Image Src="/images/create-github-repo-with-vs2019.png" Class="img-fluid" Alt="Create GitHub Repo using VS2019" Title="Create GitHub Repo using VS2019" /?&gt;
&lt;p&gt;&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-2-registering-your-github-page"&gt;&lt;strong&gt;Step 2 -&lt;/strong&gt; Registering your GitHub Page&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Now your code is in GitHub we will have to add some magic to hook up the NetlifyCMS. For this we first need to set up a Netlify site (we are not going to use this site… complicated I know. And, ‘Yes I wish there was a better way…’)&lt;/p&gt;
&lt;p&gt;But first, now we are in GitHub, let’s do some plumbing for our GitHub page. Create a new public repository on your GitHub and name this repository &amp;lt;YourGithubName&amp;gt;.github.io. This will also be the domain where your website is hosted. Next we need to hook up your code to automatically deploy to this GitHub Page. Go inside the newly created Page repo and go to the ‘Settings’ tap and select 'Pages'. Press ‘Choose a theme’ and select the first theme and press ‘Select theme’. This will generate a branch called ‘gh-pages’ where the selected theme will deploy. Don’t worry we are going to overwrite this default theme with our own awesome static website.&lt;/p&gt;
&lt;p&gt;If you know go to the ‘Pages’ section in your repo ‘Settings’, you should see in green ‘Your site is published at https://&amp;lt;YourGithubName&amp;gt;.github.io/’. If it says published at https://&amp;lt;YourGithubName&amp;gt;.github.io/&amp;lt;RepoName&amp;gt;/’ then you did not name your repo correctly &amp;lt;YourGithubName&amp;gt;.github.io. This will not work because the blog site expects to be published inside the root of your website domain!
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-3-setup-netlify-cms"&gt;&lt;strong&gt;Step 3 -&lt;/strong&gt; Setup Netlify CMS&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;To set up Netlify CMS follow the first two steps ‘creating an GitHub OAuth App’ and ‘Creating a Netlify Site’ from the following &lt;a href="https://cnly.github.io/2018/04/14/just-3-steps-adding-netlify-cms-to-existing-github-pages-site-within-10-minutes.html"&gt;great blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we can add the &lt;em&gt;config.yml&lt;/em&gt; to &lt;em&gt;/input/admin&lt;/em&gt; directory inside your code. This is the heart of the Netlify CMS. You can download my &lt;em&gt;config.yml&lt;/em&gt; from my &lt;a href="https://github.com/Feiko/StaticBlogExample/blob/master/input/admin/config.yml"&gt;GitHub Repo&lt;/a&gt;. I’ve gone ahead and configured this &lt;em&gt;config.yml&lt;/em&gt; file for you. You only have to change the backend settings inside the &lt;em&gt;config.yml&lt;/em&gt; to target the GitHub Repo where your site generator lives (so not your GitHub Pages Repo). So change ‘repo:  &amp;lt;GitHubName&amp;gt;/&amp;lt;RepoName&amp;gt;‘  i.e.  feiko/StaticBlogExample. Also change the site domain 'site_domain'  to the &amp;lt;SiteName&amp;gt;.netlify.app  you just created when configuring Netlify. If you use a different branch then ‘master’ please also change this setting.&lt;/p&gt;
&lt;p&gt;Go ahead and git commit and push this &lt;em&gt;config.yml&lt;/em&gt; to GitHub. Now you can preview the site locally using the &lt;code&gt;dotnet run -- preview&lt;/code&gt; command (see Part I) and browse to ‘localhost:5080/admin’. You should be able to log into your CMS using your GitHub credentials.&lt;/p&gt;
&lt;p&gt;Now you can write a blog or page in the CMS. Netlify will automatically commit your new content to your remote GitHub repo. To preview the changes locally, you need to ‘git pull’ the content from your remote repo. Run the preview site and enjoy your freshly written blog… locally…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Don’t forget to commit and push your local changes to GitHub. You can also add the /output folder to the .gitignore file so you don’t keep pushing and pulling these changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If the admin page is displayed malformed mixed with CleanBlog theme elements. Then we need to tell Statiq to ignore the &lt;em&gt;admin&lt;/em&gt; directory. If everything looks okay, then ignore this step.&lt;/p&gt;
&lt;p&gt;To tell Statiq to ignore the &lt;em&gt;/input/admin&lt;/em&gt; directory you can insert the following code to &lt;em&gt;program.cs&lt;/em&gt; after ‘.CreateWeb(args)’.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;.AddSetting(WebKeys.ExcludedPaths,
            	new List&amp;lt;NormalizedPath&amp;gt;
            	{
                	new NormalizedPath(&amp;quot;input/admin&amp;quot;),
            	})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-4-deploy-your-site-to-github-pages"&gt;&lt;strong&gt;Step 4 -&lt;/strong&gt; Deploy your site to GitHub Pages&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Finally we come to the magic Sauce. We are going to host our site on our GitHub Page and use GitHub Actions to update your website automatically every time you commit a change in your CMS or on your GitHub repo.&lt;/p&gt;
&lt;p&gt;First we are going to generate a token to allow Github Action to update your GitHub Pages. For this login into GitHub.com. In the top right click on your icon and in the drop-down menu select ‘Settings’. Now select ‘Developer Settings’ and then select ‘Personal access tokens’. Click ‘Generate new token’. Give the token a recognizable name in ‘Note’ i.e. ‘Page Token’, then &lt;strong&gt;only&lt;/strong&gt; check ‘public_repo’ under ‘Select scopes’, at the bottom click the green ‘Generate token’ button. Copy the generated token to a temp document for later use.&lt;/p&gt;
&lt;p&gt;Now we tell Statiq where to deploy or website, by adding the following code to Program.cs, after ‘.CreateWeb(args)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;.DeployToGitHubPagesBranch(
            	&amp;quot;&amp;lt;githubName in my case: feiko&amp;gt;&amp;quot;,
            	&amp;quot;&amp;lt;RepoName Github Pages, in my case: feiko.github.io &amp;gt;&amp;quot;,
                Environment.GetEnvironmentVariable(&amp;quot;GITHUB_TOKEN&amp;quot;),
            	&amp;quot;&amp;lt;the branch name that holds the page content, in my case: gh-pages&amp;gt;&amp;quot;
            	)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My complete program.cs looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Statiq.App;
using Statiq.Common;
using Statiq.Web;
 
namespace StaticBlogExample
{
	public class Program
	{
    	public static async Task&amp;lt;int&amp;gt; Main(string[] args) =&amp;gt;
        	await Bootstrapper
        	.Factory
        	.CreateWeb(args)
        	.DeployToGitHubPagesBranch(
            	&amp;quot;feiko&amp;quot;,
            	&amp;quot;feiko.github.io&amp;quot;,
                Environment.GetEnvironmentVariable(&amp;quot;PAGE_TOKEN&amp;quot;),
            	&amp;quot;gh-pages&amp;quot;
            	)
        	.AddSetting(WebKeys.ExcludedPaths,
            	new List&amp;lt;NormalizedPath&amp;gt;
            	{
                	new NormalizedPath(&amp;quot;input/admin&amp;quot;),
            	})
 
        	.RunAsync();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can optionally test this code by changing the  ‘Environment.GetEnvironmentVariable(&amp;quot;PAGE_TOKEN&amp;quot;)’, to the token string you copied earlier. Now run &lt;code&gt;dotnet run -- deploy&lt;/code&gt;. Your content should now be visible inside your GitHub pages repo and you can visit your static website at ‘https://&amp;lt;YourGithubName&amp;gt;.github.io/’. It can take a couple of minutes for GitHub to start hosting your site the first time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Never&lt;/strong&gt; commit your GitHub token to GitHub. So be sure to change this line back after you’ve finished. If you have published your token by accident, your token will no longer work and you have to renew your token.*&lt;/p&gt;
&lt;p&gt;Now make sure you commit and push your code to GitHub for the last time.
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-5-automatic-deployment-using-github-actions"&gt;&lt;strong&gt;Step 5 -&lt;/strong&gt; Automatic deployment using GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;The last step is to create a GitHub Action that will run the website generator every time you update your website using your CMS or checking in some new code.&lt;/p&gt;
&lt;p&gt;Go to GitHub and open the Repo with your site generator code (not your GitHub Page repo). Open the tab ‘Actions’ and click ‘set up a workflow yourself -&amp;gt;’.&lt;/p&gt;
&lt;p&gt;Replace the code inside the editor with the following script:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;name: Publish GitHub_Page

on:
  push:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout&amp;#64;v2
    - name: Setup .NET
      uses: actions/setup-dotnet&amp;#64;v1
      with:
        dotnet-version: 5.0.x
    - run: dotnet run -- deploy
      env:
        PAGE_TOKEN: ${{ secrets.PAGE_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then press the green ‘start commit’ button. Finally we need to generate an authorization token that will allow Actions to deploy to GitHub Pages. Go to the ‘settings’ tap of your site-generator-repo and in your left menu select ‘Secrets’ to create a secret for your GitHub commit token. Click ‘New repository secret’. Name this secret ‘PAGE_TOKEN', inside the ‘Value’ paste the token you generated earlier. Now press ‘Add secret’ and voila your token is stored securely inside your GitHub Repo.&lt;/p&gt;
&lt;p&gt;To kick off the action and deploy your site the first time you need to make a Git commit to your website. The easiest way to do this is by creating a readme.md inside the root of your site generator repo in Github. This commit will kick off the action. You can see your action status in the GitHub ‘action’ tab. After your Action has run successfully, you see your static blog at https://&amp;lt;YourGithubName&amp;gt;.github.io/. From now on all changes you make inside your CMS https://&amp;lt;YourGithubName&amp;gt;.github.io/admin/, will be committed to the GitHub websiteGenerator repo. This will kick off the action and update your website. &lt;/p&gt;
&lt;p&gt;And now you're &lt;strong&gt;done&lt;/strong&gt;! Congratulations, how cool! You see, now all .NET geeks can blog like Scott Hanselman! I can’t wait for you to share your knowledge with the world.&lt;/p&gt;
&lt;p&gt;If you want to create a more special website like myself, you can create your own theme or reuse a theme you already have. Be sure to check out the documentation on &lt;a href="https://statiq.dev/web/"&gt;https://statiq.dev/web/&lt;/a&gt;, also look at the documentation of Netlify CMS on &lt;a href="https://www.netlifycms.org/docs/configuration-options/"&gt;how to configure your config.yml file&lt;/a&gt;. Happy coding!
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="conclusion"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Having a .NET powered static page generator made my life a lot easier. I was able to reuse a lot of my old ASP.NET knowledge when creating my own web theme. Setting up Netlify CMS together with a Netlify account can feel a bit circumstantial. But having a CMS experience makes adding content a lot easier. Because we have used a flat-file headless CMS we can easily switch from the CMS system. Perhaps in the future we would have a CMS built using .NET Blazor, that would be really awesome! &lt;/p&gt;
&lt;p&gt;Please let me know if you found this blog helpful or have any questions. Happy coding!&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Create your own .net powered static website for FREE</title>
			<link>http://www.feiko.io/posts/2021-04-30-create-your-own-net-powered-website-for-free</link>
			<description>Create an .net powered website for free using Github Pages, Statiq.web and NetlifyCMS - Part I</description>
			<enclosure url="http://www.feiko.io/images/computer-code_awxc4nofzn.jpg" length="0" type="image" />
			<guid>http://www.feiko.io/posts/2021-04-30-create-your-own-net-powered-website-for-free</guid>
			<pubDate>Sat, 01 May 2021 13:00:45 GMT</pubDate>
			<content:encoded>&lt;p&gt;Blog like Scott Hanselman. What self-respecting .net developer has not thought about writing their own blogs? I certainly have. As an Internet of Things Specialist and .net developer, I have embarked on many IT adventures over the years. Adventures of lessons learned, amusement, frustrations and wins that I’d love to share with the world. Being a non-native English-speaking dyslexic has held me from doing this, but no longer! With this blog about creating a 100% .NET powered static website for free, I’m officially launching my own blog and video website. Feiko.IO says: “HELLO WORLD!!!”&lt;/p&gt;
&lt;p&gt;When I decided to start a blog website, I soon found out that hosting a cool Umbraco powered WEB app on Azure is quite expensive for a small site. The cheapest usable Web App tier would set me back 46 euro a month. This is way too much for this stubborn, lazy, cheap ass developer. So I decided that ASP.NET is a no go.&lt;/p&gt;
&lt;p&gt;I found the website world has radically changed since I built my last website in 2014. It’s a brave new world out there. Finally, I found a solution to my website problem: Static Websites! Static websites are fast and cheap. But being a stubborn developer, I want to build this website using .net technology, using ASP.NET goodies like Visual Studio tooling, Razor script and CSHTML. And on top of everything I want a dynamic Content Management System. Follow me on my adventure in creating the ideal .net static Website, like the one you are on right now! Because: Yes, you can have it all!&lt;/p&gt;
&lt;p&gt;In this blog I’ll show you how to quickly create your own simple .net powered static blog website using the CleanBlog theme. Next week, in part II, we’ll talk about adding a headless flat-file Content Management System and hosting your site for free on GitHub Pages. It’s all about making blogging fun and easy!&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
 
&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic c# skills&lt;/li&gt;
&lt;li&gt;Your favorite IDE (Visual Studio 2019)&lt;/li&gt;
&lt;li&gt;.net 5 (other versions probably will work)&lt;/li&gt;
&lt;li&gt;git
&lt;br /&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-1-create-statiq-hello-world"&gt;&lt;strong&gt;STEP 1 -&lt;/strong&gt; create Statiq ‘HELLO WORLD’&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Start by following the great ‘getting started’ tutorial over on &lt;a href="https://statiq.dev/web/"&gt;Statiq.dev&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you have your first static website but there’s not a lot going on, just plain old HTML. Basically, that’s of course what static websites are just some HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;For now, to render a new page, you have to write a markup file inside your input directory and at some YAML to the top of the page. I know this is great for many people, but remember I’m a dyslexic so I’m going to have all kinds of typos in my YAML. Also, I will not remember all variables that I need to put at the top of my markdown file. That’s why I want a CMS. Clearly we’re just getting started and are still a far cry from a good-looking blog site. But that is all going to change… Just bear with me.&lt;br /&gt;
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-2-create-our-cleanblog-blogging-site"&gt;&lt;strong&gt;Step 2 -&lt;/strong&gt;  create our ‘CleanBlog’ blogging site&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Now we are going to create a proper site using the&lt;a href="https://startbootstrap.com/previews/clean-blog"&gt; ‘CleanBlog’&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;For this, open a terminal (inside Visual Studio solution explorer, right click on your project and select ‘Open in Terminal’)&lt;/p&gt;
&lt;p&gt;Clone the CleanBlog theme &lt;a href="https://github.com/statiqdev/CleanBlog"&gt;repo&lt;/a&gt; by typing the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/statiqdev/CleanBlog.git theme&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you used git clone to get the theme, make sure you remove the hidden .git directory inside the theme directory. Else you will get an ‘The process '/usr/bin/git' failed with exit code 128’ when we are going to publish our website in part II.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alternative: just create a new directory called ‘theme’ inside your project and extract the code from the repo inside this directory.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are still running the statiq preview, than exit this by typing: &lt;code&gt;Exit()&lt;/code&gt; inside the terminal that’s running statiq. Then run your project. This will generate the statiq website. Make sure you still have your index.md file inside the input directory, else there will be no content to create a website from. You can run the preview page at any time using the command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dotnet run -- preview&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The preview mode will live update. How cool is that? Good work, Statiq!
You can browse again to your website localhost:5080 and should see:&lt;/p&gt;
&lt;?# Image Src="/images/helloworld.png" Class="img-fluid" Alt="Hello World site" Title="Your hello world landing page" /?&gt;
&lt;p&gt;This is starting to look like a real website already. All that in just a matter of minutes!
&lt;br /&gt;
 
&lt;br /&gt;
 &lt;/p&gt;
&lt;h3 id="step-3-create-your-first-blog"&gt;&lt;strong&gt;Step 3 -&lt;/strong&gt; Create your first Blog&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;p&gt;Statiq.web will by default look for blog content inside the input/posts directory. Create this posts directory.&lt;/p&gt;
&lt;p&gt;If you open &lt;em&gt;/theme/readme.md&lt;/em&gt;, you’ll see that a page expects the following YAML input:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`Title`: The title of the page (or post).&lt;/li&gt;
&lt;li&gt;`Description`: A description of the page.&lt;/li&gt;
&lt;li&gt;`Lead`: Descriptive text that expands on the title, usually used for posts.&lt;/li&gt;
&lt;li&gt;`Tags`: Tags for a blog post.&lt;/li&gt;
&lt;li&gt;`Published`: The date a page or post was published.&lt;/li&gt;
&lt;li&gt;`Image`: Path to an image for the page or post.&lt;/li&gt;
&lt;li&gt;`ShowInNavbar`: Set to `false` to hide the page in the top navigation.&lt;/li&gt;
&lt;li&gt;`IsPost`: Set to `false` to exclude the file from the set of posts. This will also disable post styling like displaying tags in the header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is too much typing for my dyslexic brain. But be a hero and try it out, just like you build your index.md. Make sure your test blog is inside the &lt;em&gt;posts&lt;/em&gt; directory. If you add content to your posts, you probably want to remove the &lt;em&gt;/input/index.md&lt;/em&gt; you created in step 1. The index.html actually overwrites the &lt;em&gt;index.cshtml&lt;/em&gt; inside the theme, therefore hiding you posts. You can add images to the &lt;em&gt;/input/image&lt;/em&gt;s directory, which you need to create. You can add your image to your blog using by setting the &lt;em&gt;Image&lt;/em&gt; variable:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Image: /images/&amp;lt;your image file name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also try out some of the cool supported markdown &lt;a href="https://statiq.dev/web/content-and-data/content/shortcodes"&gt;ShortCodes&lt;/a&gt; inside your blog.&lt;/p&gt;
&lt;p&gt;Okay, that’s it for this tutorial. We are already having fun with .net and static websites. A great thanks to &lt;a href="https://daveaglick.com/"&gt;Dave Glick&lt;/a&gt; for the splendid work on Statiq platform. None of this would be possible without his work. In my next post, part II, we are going to add the long awaited CMS and start hosting your site for free on Github Pages. I can’t wait!&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>